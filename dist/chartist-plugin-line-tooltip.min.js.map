{"version":3,"file":"chartist-plugin-line-tooltip.min.js","sources":["chartist-plugin-line-tooltip.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","window","document","Chartist","defaultOptions","formatHeader","noop","formatValue","cursor","hiddenPositions","header","undefined","classNames","tooltip","series","Tooltip","chart","chartRect","coords","options","$tooltip","$","container","length","appendTo","hide","tooltipHtml","values","html","reduce","prev","value","i","alphaNumerate","getTooltipOffset","left","top","height","outerHeight","show","index","css","Cursor","svg","elem","$header","showHeader","x","width","attr","style","x1","x2","y1","y2","IndexTracker","binarySearch","start","end","minDistanceIndex","middle","Math","floor","distance","abs","get","reset","set","newIndex","plugins","lineTooltip","extend","Line","labels","indexTracker","on","event","data","Array","type","target","tagName","toLowerCase","offsetX","originalEvent","layerX","indexOf","map"],"mappings":"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","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.lineTooltip'] = factory();\n  }\n}(this, function () {\n\n  /**\r\n   * Chartist.js plugin to add tooltip in a line chart.\r\n   *\r\n   */\r\n  /* global Chartist */\r\n  (function (window, document, Chartist) {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n      formatHeader: Chartist.noop,\r\n      formatValue: Chartist.noop,\r\n      cursor: {\r\n        hiddenPositions: [],\r\n        header: undefined\r\n      },\r\n      classNames: {\r\n        tooltip: 'tooltip',\r\n        series: 'series',\r\n        cursor: 'cursor'\r\n      }\r\n    };\r\n\r\n    var Tooltip = function (chart, chartRect, coords, options) {\r\n\r\n      var $tooltip = $('.' + options.classNames.tooltip, chart.container);\r\n\r\n      if (!$tooltip.length) {\r\n        $tooltip = $('<div class=\"' + options.classNames.tooltip + '\"></div>').appendTo(chart.container);\r\n      }\r\n\r\n      $tooltip.hide();\r\n\r\n      var tooltipHtml = function (header, values) {\r\n\r\n        var html = '<div class=\"' + options.classNames.tooltip + '-header\">' + (header || '') + '</div>';\r\n\r\n        return values.reduce(function (prev, value, i) {\r\n          return prev + '<div class=\"' + options.classNames.series + ' ' +  options.classNames.series + '-' + Chartist.alphaNumerate(i) + '\">' +\r\n            '<svg class=\"' + options.classNames.series + '-label\"><line x1=\"0\" x2=\"100%\" y1=\"50%\" y2=\"50%\" class=\"label-line\"></line></svg>' +\r\n            '<div class=\"value\">' + value + '</div></div>';\r\n        }, html);\r\n      };\r\n\r\n      var getTooltipOffset = function (left) {\r\n        return {\r\n          left: left,\r\n          top: chartRect.height() / 2 - $tooltip.outerHeight() / 2\r\n        };\r\n      };\r\n\r\n      this.hide = function () {\r\n        $tooltip.hide();\r\n      };\r\n\r\n      this.show = function (index, header, values) {\r\n        $tooltip\r\n        .html(tooltipHtml(header, values))\r\n        .css(getTooltipOffset(coords[index]))\r\n        .show();\r\n      };\r\n    };\r\n\r\n    var Cursor = function (chart, chartRect, coords, options) {\r\n\r\n      var cursor = chart.svg.elem('line', {}, options.classNames.cursor);\r\n\r\n      var $header = $('.' + options.classNames.cursor + '-header', chart.container);\r\n\r\n      if (!$header.length) {\r\n        $header = $('<span class=\"' + options.classNames.cursor + '-header\" style=\"position: absolute\"></span>')\r\n          .appendTo(chart.container);\r\n      }\r\n\r\n      $header.hide();\r\n\r\n      var showHeader = function (x) {\r\n        $header\r\n          .html(options.cursor.header || '')\r\n          .css({ top: 0, left: x - $header.width() / 2 })\r\n          .show();\r\n      };\r\n\r\n      this.hide = function () {\r\n        cursor.attr({ style: 'display: none' });\r\n        $header.hide();\r\n      };\r\n\r\n      this.show = function (index) {\r\n\r\n        var x = coords[index];\r\n\r\n        showHeader(x);\r\n\r\n        cursor.attr({\r\n          x1: x,\r\n          x2: x,\r\n          y1: chartRect.y1,\r\n          y2: chartRect.y2 + $header.height(),\r\n          style: ''\r\n        });\r\n      };\r\n    };\r\n\r\n    var IndexTracker = function (coords) {\r\n\r\n      var index = -1;\r\n\r\n      var binarySearch = function (value, start, end, minDistanceIndex) {\r\n\r\n        if (start === undefined) {\r\n          start = 0;\r\n        }\r\n        if (end === undefined) {\r\n          end = coords.length - 1;\r\n        }\r\n\r\n        if (start > end) {\r\n          return minDistanceIndex;\r\n        }\r\n\r\n        var middle = Math.floor((start + end) / 2);\r\n        var distance = Math.abs(value - coords[middle]);\r\n\r\n        if (distance === 0) {\r\n          return middle;\r\n        }\r\n\r\n        if (minDistanceIndex === undefined || distance < Math.abs(value - coords[minDistanceIndex])) {\r\n          minDistanceIndex = middle;\r\n        }\r\n\r\n        if (value < coords[middle]) {\r\n          return binarySearch(value, start, middle - 1, minDistanceIndex);\r\n        } else {\r\n          return binarySearch(value, middle + 1, end, minDistanceIndex);\r\n        }\r\n      };\r\n\r\n      this.get = function () {\r\n        return index;\r\n      };\r\n\r\n      this.reset = function () {\r\n        index = -1;\r\n      };\r\n\r\n      this.set = function (x) {\r\n\r\n        var newIndex = binarySearch(x);\r\n\r\n        if (index === newIndex) {\r\n          return false;\r\n        }\r\n\r\n        index = newIndex;\r\n\r\n        return true;\r\n      };\r\n    };\r\n\r\n    Chartist.plugins = Chartist.plugins || {};\r\n    Chartist.plugins.lineTooltip = function (options) {\r\n\r\n      options = Chartist.extend({}, defaultOptions, options);\r\n\r\n      return function (chart) {\r\n\r\n        if (!(chart instanceof Chartist.Line)) {\r\n          return;\r\n        }\r\n\r\n        var series,\r\n           labels,\r\n           coords;\r\n\r\n        var tooltip,\r\n           cursor,\r\n           indexTracker;\r\n\r\n        chart.on('data', function (event) {\r\n          labels = event.data.labels;\r\n          coords = new Array(labels.length);\r\n          series = new Array(event.data.series.length);\r\n        });\r\n\r\n        chart.on('draw', function (data) {\r\n\r\n          if (data.type === 'line') {\r\n            series[data.index] = data.values;\r\n          }\r\n\r\n          if (data.type === 'point') {\r\n            coords[data.index] = data.x;\r\n          }\r\n        });\r\n\r\n        chart.on('created', function (data) {\r\n          indexTracker = new IndexTracker(coords);\r\n          tooltip = new Tooltip(chart, data.chartRect, coords, options);\r\n          cursor = new Cursor(chart, data.chartRect, coords, options);\r\n        });\r\n\r\n        $(chart.container).on('mouseleave', function () {\r\n          indexTracker.reset();\r\n          tooltip.hide();\r\n          cursor.hide();\r\n        });\r\n\r\n        $(chart.container).on('mousemove', '.' + chart.options.classNames.chart, function (event) {\r\n\r\n          if (event.target.tagName.toLowerCase() !== 'svg') {\r\n            return;\r\n          }\r\n\r\n          var offsetX = event.offsetX || event.originalEvent.layerX;\r\n\r\n          if (!indexTracker.set(offsetX)) {\r\n            return;\r\n          }\r\n\r\n          var index = indexTracker.get();\r\n\r\n          if (options.cursor.hiddenPositions.indexOf(labels[index]) === -1) {\r\n            cursor.show(index);\r\n          } else {\r\n            cursor.hide();\r\n          }\r\n\r\n          var values = series.map(function (x, i) {\r\n            return options.formatValue(x[index], i);\r\n          });\r\n\r\n          tooltip.show(index, options.formatHeader(labels[index], index), values);\r\n        });\r\n      };\r\n    };\r\n\r\n  }(window, document, Chartist));\r\n\n  return Chartist.plugins.lineTooltip;\n\n}));\n"]}