{"version":3,"file":"chartist-plugin-line-tooltip.min.js","sources":["chartist-plugin-line-tooltip.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","window","document","Chartist","defaultOptions","formatHeader","noop","formatValue","cursorLabel","undefined","classNames","tooltip","series","cursor","Tooltip","chart","chartRect","coords","options","$tooltip","$","container","length","appendTo","hide","getGroupName","index","data","groupName","alphaNumerate","getClassName","className","group","values","groups","map","value","i","text","filter","reduce","result","indexOf","push","staticHtmlStart","staticHtmlMiddle","staticHtmlEnd","tooltipHtml","header","html","prev","getTooltipOffset","left","top","height","outerHeight","show","css","Cursor","svg","elem","$label","chartPadding","halfLabelWidth","width","showLabel","x","attr","style","x1","x2","y1","y2","IndexTracker","binarySearch","start","end","minDistanceIndex","middle","Math","floor","distance","abs","get","reset","set","newIndex","plugins","lineTooltip","extend","Line","labels","indexTracker","on","event","Array","type","target","tagName","toLowerCase","offsetX","originalEvent","layerX"],"mappings":";;;;;;CAAC,SAAUA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WACT,MAAQF,GAAKI,oBAAsBH,MAET,gBAAZI,SAIhBC,OAAOD,QAAUJ,IAEjBD,EAAK,gCAAkCC,KAEzCM,KAAM,WAsRN,MA/QC,UAAUC,EAAQC,EAAUC,GAC3B,YAEA,IAAIC,IACFC,aAAcF,EAASG,KACvBC,YAAaJ,EAASG,KACtBE,YAAaC,OACbC,YACEC,QAAS,UACTC,OAAQ,SACRC,OAAQ,WAIRC,EAAU,SAAUC,EAAOC,EAAWC,EAAQC,GAEhD,GAAIC,GAAWC,EAAE,IAAMF,EAAQR,WAAWC,QAASI,EAAMM,UAEpDF,GAASG,SACZH,EAAWC,EAAE,eAAiBF,EAAQR,WAAWC,QAAU,YAAYY,SAASR,EAAMM,YAGxFF,EAASK,MAET,IAAIC,GAAe,SAAUC,GAC3B,MAAOX,GAAMY,KAAKf,OAAOc,GAAOE,WAAazB,EAAS0B,cAAcH,IAGlEI,EAAe,SAAUJ,GAC3B,MAAOX,GAAMY,KAAKf,OAAOc,GAAOK,WAAcb,EAAQR,WAAWE,OAAS,IAAMT,EAAS0B,cAAcH,IAGrGM,EAAQ,SAAUC,GAEpB,GAAIC,KAEJ,OAAOD,GACJE,IAAI,SAAUC,EAAOC,GACpB,OACET,UAAWH,EAAaY,GACxBN,UAAWD,EAAaO,GACxBC,KAAMF,KAGTG,OAAO,SAAUP,GAChB,MAAmBvB,UAAfuB,EAAMM,MAAqC,OAAfN,EAAMM,MAAgC,KAAfN,EAAMM,MAC3DJ,EAAOF,EAAMJ,WAAaM,EAAOF,EAAMJ,gBAChC,IAEF,IAERY,OAAO,SAAUC,EAAQT,GAKxB,MAJoD,KAAhDE,EAAOF,EAAMJ,WAAWc,QAAQV,EAAMM,QACxCJ,EAAOF,EAAMJ,WAAWe,KAAKX,EAAMM,MACnCG,EAAOE,KAAKX,IAEPS,QAITG,EAAkB,eAAiB1B,EAAQR,WAAWE,OAAS,IAC/DiC,EAAmB,iBAAmB3B,EAAQR,WAAWE,OAAS,uGAClEkC,EAAgB,eAEhBC,EAAc,SAAUC,EAAQf,GAElC,GAAIgB,GAAO,eAAiB/B,EAAQR,WAAWC,QAAU,aAAeqC,GAAU,IAAM,QAIxF,OAFAf,GAASD,EAAMC,GAERA,EAAOO,OAAO,SAAUU,EAAMd,GACnC,MAAOc,GAAON,EAAkBR,EAAML,UAAYc,EAAmBT,EAAME,KAAOQ,GACjFG,IAGDE,EAAmB,SAAUC,GAC/B,OACEA,KAAMA,EACNC,IAAKrC,EAAUsC,SAAW,EAAInC,EAASoC,cAAgB,GAI3DvD,MAAKwB,KAAO,WACVL,EAASK,QAGXxB,KAAKwD,KAAO,SAAU9B,EAAOsB,EAAQf,GACnCd,EACG8B,KAAKF,EAAYC,EAAQf,IACzBwB,IAAIN,EAAiBlC,EAAOS,KAC5B8B,SAIHE,EAAS,SAAU3C,EAAOC,EAAWC,EAAQC,GAE/C,GAAIL,GAASE,EAAM4C,IAAIC,KAAK,UAAY1C,EAAQR,WAAWG,QAEvDgD,EAASzC,EAAE,IAAMF,EAAQR,WAAWG,OAAS,SAAUE,EAAMM,UAE5DwC,GAAOvC,SACVuC,EAASzC,EAAE,gBAAkBF,EAAQR,WAAWG,OAAS,8CACtDoC,KAAK/B,EAAQV,aAAe,IAC5Be,SAASR,EAAMM,YAGpBwC,EACGrC,OACAiC,IAAI,MAAO1C,EAAMG,QAAQ4C,aAAaT,IAAMQ,EAAON,cAEtD,IAAIQ,GAAiBF,EAAOG,QAAU,EAElCC,EAAY,SAAUC,GACxBL,EACGJ,IAAI,OAAQS,EAAIH,GAChBP,OAGLxD,MAAKwB,KAAO,WACVX,EAAOsD,MAAOC,MAAO,kBACrBP,EAAOrC,QAGTxB,KAAKwD,KAAO,SAAU9B,GAEpB,GAAIwC,GAAIjD,EAAOS,EAEfuC,GAAUC,GAEVrD,EAAOsD,MACLE,GAAIH,EACJI,GAAIJ,EACJK,GAAIvD,EAAUuD,GACdC,GAAIxD,EAAUwD,GACdJ,MAAO,OAKTK,EAAe,SAAUxD,GAE3B,GAAIS,GAAQ,GAERgD,EAAe,SAAUtC,EAAOuC,EAAOC,EAAKC,GAS9C,GAPcpE,SAAVkE,IACFA,EAAQ,GAEElE,SAARmE,IACFA,EAAM3D,EAAOK,OAAS,GAGpBqD,EAAQC,EACV,MAAOC,EAGT,IAAIC,GAASC,KAAKC,OAAOL,EAAQC,GAAO,GACpCK,EAAWF,KAAKG,IAAI9C,EAAQnB,EAAO6D,GAEvC,OAAiB,KAAbG,EACKH,IAGgBrE,SAArBoE,GAAkCI,EAAWF,KAAKG,IAAI9C,EAAQnB,EAAO4D,OACvEA,EAAmBC,GAGjB1C,EAAQnB,EAAO6D,GACVJ,EAAatC,EAAOuC,EAAOG,EAAS,EAAGD,GAEvCH,EAAatC,EAAO0C,EAAS,EAAGF,EAAKC,IAIhD7E,MAAKmF,IAAM,WACT,MAAOzD,IAGT1B,KAAKoF,MAAQ,WACX1D,EAAQ,IAGV1B,KAAKqF,IAAM,SAAUnB,GAEnB,GAAIoB,GAAWZ,EAAaR,EAE5B,OAAIxC,KAAU4D,GACL,GAGT5D,EAAQ4D,GAED,IAIXnF,GAASoF,QAAUpF,EAASoF,YAC5BpF,EAASoF,QAAQC,YAAc,SAAUtE,GAIvC,MAFAA,GAAUf,EAASsF,UAAWrF,EAAgBc,GAEvC,SAAUH,GAEf,GAAMA,YAAiBZ,GAASuF,KAAhC,CAIA,GAAI9E,GACF+E,EACA1E,EAEEN,EACFE,EACA+E,CAEF7E,GAAM8E,GAAG,OAAQ,SAAUC,GACzBH,EAASG,EAAMnE,KAAKgE,OACpB1E,EAAS,GAAI8E,OAAMJ,EAAOrE,QAC1BV,EAAS,GAAImF,OAAMD,EAAMnE,KAAKf,OAAOU,UAGvCP,EAAM8E,GAAG,OAAQ,SAAUlE,GAEP,SAAdA,EAAKqE,OACPpF,EAAOe,EAAKD,OAASC,EAAKM,QAGV,UAAdN,EAAKqE,OACP/E,EAAOU,EAAKD,OAASC,EAAKuC,KAI9BnD,EAAM8E,GAAG,UAAW,SAAUlE,GAC5BiE,EAAe,GAAInB,GAAaxD,GAChCN,EAAU,GAAIG,GAAQC,EAAOY,EAAKX,UAAWC,EAAQC,GACrDL,EAAS,GAAI6C,GAAO3C,EAAOY,EAAKX,UAAWC,EAAQC,KAGrDE,EAAEL,EAAMM,WAAWwE,GAAG,aAAc,WAClCD,EAAaR,QACbzE,EAAQa,OACRX,EAAOW,SAGTJ,EAAEL,EAAMM,WAAWwE,GAAG,YAAa,IAAM9E,EAAMG,QAAQR,WAAWK,MAAO,SAAU+E,GAEjF,GAA2C,QAAvCA,EAAMG,OAAOC,QAAQC,cAAzB,CAIA,GAAIC,GAAUN,EAAMM,SAAWN,EAAMO,cAAcC,MAEnD,IAAKV,EAAaP,IAAIe,GAAtB,CAIA,GAAI1E,GAAQkE,EAAaT,KAEzBtE,GAAO2C,KAAK9B,EAEZ,IAAIO,GAASrB,EAAOuB,IAAI,SAAU+B,EAAG7B,GACnC,MAAOnB,GAAQX,YAAY2D,EAAExC,GAAQW,IAGvC1B,GAAQ6C,KAAK9B,EAAOR,EAAQb,aAAasF,EAAOjE,GAAQA,GAAQO,WAKrEhC,OAAQC,SAAUC,UAEdA,SAASoF,QAAQC","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.lineTooltip'] = factory();\n  }\n}(this, function () {\n\n  /**\r\n   * Chartist.js plugin to add tooltip in a line chart.\r\n   *\r\n   */\r\n  /* global Chartist */\r\n  (function (window, document, Chartist) {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n      formatHeader: Chartist.noop,\r\n      formatValue: Chartist.noop,\r\n      cursorLabel: undefined,\r\n      classNames: {\r\n        tooltip: 'tooltip',\r\n        series: 'series',\r\n        cursor: 'cursor'\r\n      }\r\n    };\r\n\r\n    var Tooltip = function (chart, chartRect, coords, options) {\r\n\r\n      var $tooltip = $('.' + options.classNames.tooltip, chart.container);\r\n\r\n      if (!$tooltip.length) {\r\n        $tooltip = $('<div class=\"' + options.classNames.tooltip + '\"></div>').appendTo(chart.container);\r\n      }\r\n\r\n      $tooltip.hide();\r\n\r\n      var getGroupName = function (index) {\r\n        return chart.data.series[index].groupName || Chartist.alphaNumerate(index);\r\n      };\r\n\r\n      var getClassName = function (index) {\r\n        return chart.data.series[index].className || (options.classNames.series + '-' + Chartist.alphaNumerate(index));\r\n      };\r\n\r\n      var group = function (values) {\r\n\r\n        var groups = {};\r\n\r\n        return values\r\n          .map(function (value, i) {\r\n            return {\r\n              groupName: getGroupName(i),\r\n              className: getClassName(i),\r\n              text: value\r\n            };\r\n          })\r\n          .filter(function (group) {\r\n            if (group.text !== undefined && group.text !== null && group.text !== '') {\r\n              groups[group.groupName] = groups[group.groupName] || [];\r\n              return true;\r\n            }\r\n            return false;\r\n          })\r\n          .reduce(function (result, group) {\r\n            if (groups[group.groupName].indexOf(group.text) === -1) {\r\n              groups[group.groupName].push(group.text);\r\n              result.push(group);\r\n            }\r\n            return result;\r\n          }, []);\r\n      };\r\n\r\n      var staticHtmlStart = '<div class=\"' + options.classNames.series + ' ';\r\n      var staticHtmlMiddle = '\"><svg class=\"' + options.classNames.series + '-label\"><line x1=\"0\" x2=\"100%\" y1=\"50%\" y2=\"50%\" class=\"label-line\"></line></svg><div class=\"value\">';\r\n      var staticHtmlEnd = '</div></div>';\r\n\r\n      var tooltipHtml = function (header, values) {\r\n\r\n        var html = '<div class=\"' + options.classNames.tooltip + '-header\">' + (header || '') + '</div>';\r\n\r\n        values = group(values);\r\n\r\n        return values.reduce(function (prev, value) {\r\n          return prev + staticHtmlStart + value.className + staticHtmlMiddle + value.text + staticHtmlEnd;\r\n        }, html);\r\n      };\r\n\r\n      var getTooltipOffset = function (left) {\r\n        return {\r\n          left: left,\r\n          top: chartRect.height() / 2 - $tooltip.outerHeight() / 2\r\n        };\r\n      };\r\n\r\n      this.hide = function () {\r\n        $tooltip.hide();\r\n      };\r\n\r\n      this.show = function (index, header, values) {\r\n        $tooltip\r\n          .html(tooltipHtml(header, values))\r\n          .css(getTooltipOffset(coords[index]))\r\n          .show();\r\n      };\r\n    };\r\n\r\n    var Cursor = function (chart, chartRect, coords, options) {\r\n\r\n      var cursor = chart.svg.elem('line', {}, options.classNames.cursor);\r\n\r\n      var $label = $('.' + options.classNames.cursor + '-label', chart.container);\r\n\r\n      if (!$label.length) {\r\n        $label = $('<span class=\"' + options.classNames.cursor + '-label\" style=\"position: absolute\"></span>')\r\n          .html(options.cursorLabel || '')\r\n          .appendTo(chart.container);\r\n      }\r\n\r\n      $label\r\n        .hide()\r\n        .css('top', chart.options.chartPadding.top - $label.outerHeight());\r\n\r\n      var halfLabelWidth = $label.width() / 2;\r\n\r\n      var showLabel = function (x) {\r\n        $label\r\n          .css('left', x - halfLabelWidth)\r\n          .show();\r\n      };\r\n\r\n      this.hide = function () {\r\n        cursor.attr({ style: 'display: none' });\r\n        $label.hide();\r\n      };\r\n\r\n      this.show = function (index) {\r\n\r\n        var x = coords[index];\r\n\r\n        showLabel(x);\r\n\r\n        cursor.attr({\r\n          x1: x,\r\n          x2: x,\r\n          y1: chartRect.y1,\r\n          y2: chartRect.y2,\r\n          style: ''\r\n        });\r\n      };\r\n    };\r\n\r\n    var IndexTracker = function (coords) {\r\n\r\n      var index = -1;\r\n\r\n      var binarySearch = function (value, start, end, minDistanceIndex) {\r\n\r\n        if (start === undefined) {\r\n          start = 0;\r\n        }\r\n        if (end === undefined) {\r\n          end = coords.length - 1;\r\n        }\r\n\r\n        if (start > end) {\r\n          return minDistanceIndex;\r\n        }\r\n\r\n        var middle = Math.floor((start + end) / 2);\r\n        var distance = Math.abs(value - coords[middle]);\r\n\r\n        if (distance === 0) {\r\n          return middle;\r\n        }\r\n\r\n        if (minDistanceIndex === undefined || distance < Math.abs(value - coords[minDistanceIndex])) {\r\n          minDistanceIndex = middle;\r\n        }\r\n\r\n        if (value < coords[middle]) {\r\n          return binarySearch(value, start, middle - 1, minDistanceIndex);\r\n        } else {\r\n          return binarySearch(value, middle + 1, end, minDistanceIndex);\r\n        }\r\n      };\r\n\r\n      this.get = function () {\r\n        return index;\r\n      };\r\n\r\n      this.reset = function () {\r\n        index = -1;\r\n      };\r\n\r\n      this.set = function (x) {\r\n\r\n        var newIndex = binarySearch(x);\r\n\r\n        if (index === newIndex) {\r\n          return false;\r\n        }\r\n\r\n        index = newIndex;\r\n\r\n        return true;\r\n      };\r\n    };\r\n\r\n    Chartist.plugins = Chartist.plugins || {};\r\n    Chartist.plugins.lineTooltip = function (options) {\r\n\r\n      options = Chartist.extend({}, defaultOptions, options);\r\n\r\n      return function (chart) {\r\n\r\n        if (!(chart instanceof Chartist.Line)) {\r\n          return;\r\n        }\r\n\r\n        var series,\r\n          labels,\r\n          coords;\r\n\r\n        var tooltip,\r\n          cursor,\r\n          indexTracker;\r\n\r\n        chart.on('data', function (event) {\r\n          labels = event.data.labels;\r\n          coords = new Array(labels.length);\r\n          series = new Array(event.data.series.length);\r\n        });\r\n\r\n        chart.on('draw', function (data) {\r\n\r\n          if (data.type === 'line') {\r\n            series[data.index] = data.values;\r\n          }\r\n\r\n          if (data.type === 'point') {\r\n            coords[data.index] = data.x;\r\n          }\r\n        });\r\n\r\n        chart.on('created', function (data) {\r\n          indexTracker = new IndexTracker(coords);\r\n          tooltip = new Tooltip(chart, data.chartRect, coords, options);\r\n          cursor = new Cursor(chart, data.chartRect, coords, options);\r\n        });\r\n\r\n        $(chart.container).on('mouseleave', function () {\r\n          indexTracker.reset();\r\n          tooltip.hide();\r\n          cursor.hide();\r\n        });\r\n\r\n        $(chart.container).on('mousemove', '.' + chart.options.classNames.chart, function (event) {\r\n\r\n          if (event.target.tagName.toLowerCase() !== 'svg') {\r\n            return;\r\n          }\r\n\r\n          var offsetX = event.offsetX || event.originalEvent.layerX;\r\n\r\n          if (!indexTracker.set(offsetX)) {\r\n            return;\r\n          }\r\n\r\n          var index = indexTracker.get();\r\n\r\n          cursor.show(index);\r\n\r\n          var values = series.map(function (x, i) {\r\n            return options.formatValue(x[index], i);\r\n          });\r\n\r\n          tooltip.show(index, options.formatHeader(labels[index], index), values);\r\n        });\r\n      };\r\n    };\r\n\r\n  } (window, document, Chartist));\r\n\n  return Chartist.plugins.lineTooltip;\n\n}));\n"]}